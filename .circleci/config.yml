version: 2.1
orbs:
  slack: circleci/slack@4.12.1

commands:

  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: circleci-integration
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID 1.
    parameters:
      Workflow_ID:
        type: string
        default: meewida1234
    #   # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.Workflow_ID>>
            aws s3 rm s3://udapeople-meewida1234 --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.Workflow_ID>>

      - notify_on_failure

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl https://kvdb.io/ARXC4LcAsHmsktYYRSAbSE/migration_meewida1234 )
            if(( $SUCCESS==9 )); 
            then
              cd ~/project/backend
              npm install
              npm audit fix
              npm run migrations:revert 
                #Add revert code here. You can find this in the Getting Started section.
              curl https://kvdb.io/ARXC4LcAsHmsktYYRSAbSE/migration_meewida1234 -d 1
              
            fi


jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure
    
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - notify_on_failure
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test
      - notify_on_failure
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [frontend-scan]
      - run: 
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            npm update js-yaml --depth 4

           # Your job code here
      - notify_on_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys: [backend-scan]
      - run: 
          name: scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
           # Your job code here
      - notify_on_failure

  deploy-infrastructure:
    docker: 
      - image:  amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run: 
          name: install aws-cli tar and gzip 
          command: yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-meewida1234" \
              --parameter-overrides ID="uda-backend-meewida1234"
              exit_code=$?
              if [[ $exit_code == 0  ||  $exit_code == 255 ]]; 
                then
                    exit 0
                else
                    exit 1
                fi 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-meewida1234" \
              --parameter-overrides ID="uda-frontend-meewida1234"
              exit_code=$?
              if [[ $exit_code == 0  ||  $exit_code == 255 ]]; 
                then
                    exit 0
                else
                    exit 1
                fi

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - destroy-environment

      # - destroy-environment
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image:   cimg/base:2022.09
      # Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
          fingerprints: ["1b:40:2f:71:d3:30:f4:37:43:be:75:d7:55:a6:b3:17"]

      - attach_workspace:
          at: ~/
      # attach workspace

      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

      - run: 
          name: install aws-cli tar and gzip 
          command: sudo apt install tar sed gzip awscli -y
      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --filters Name=tag:Name,Values="backend-meewida1234" \
            --query  'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> inventory.txt

      - run:
          name: Configure server
          command: |
            cd  .circleci/ansible/
            cat inventory.txt 
            ansible-playbook configure-server.yml -i inventory.txt
            


      # - destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend/src
            npm run migrations > migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to kvdb
          command: |
                  if grep -q "FROM" ~/project/backend/src/migrations.txt
                  then
                    curl --insecure https://kvdb.io/ARXC4LcAsHmsktYYRSAbSE/migration_meewida1234  -d '9'    
                  fi
      # - destroy-environment
      # - revert-migrations
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image:   cimg/base:stable
      # Docker image here that supports AWS CLI
    steps:
      -   checkout # Checkout code from git

      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt install unzip nodejs npm
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances  --filters "Name=tag:Name,Values=udapeople-backend-meewida1234" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-meewida1234.tar.gz dist
            aws s3 cp dist s3://udapeople-meewida1234 --recursive

      # - destroy-environment
      # - revert-migrations
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker: 
      - image: cimg/base:2022.09
      # Docker image here that supports Ansible
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["1b:40:2f:71:d3:30:f4:37:43:be:75:d7:55:a6:b3:17"]
                          
      - attach_workspace:
          at: ~/# attach workspace
      - restore_cache:
          keys: [backend-deps]

      - run:
          name: install ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - run:
          name: Install dependencies
          command: | 
             sudo apt install tar sed gzip awscli nodejs npm python3 
      - run:
          name: Add back-end ip to ansible inventory
          command: |                                                                                                     
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --output text);
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt

      - run:
          name: Deploy Ansible backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz  .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # - destroy-environment
      # - revert-migrations

      # Here's where you will add some code to rollback on failure  


  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli

      - run:
          name: Backend smoke test.
          command: |
              # Fetch and prepare the BACKEND_IP env var
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)   
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi

        

      # - destroy-environment
      # - revert-migrations
      #Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

  notify_on_success:
    docker:
      - image:  cimg/base:2022.09
    steps:
      - slack/notify:
          event: pass
          channel: circleci-integration
          template: success_tagged_deploy_1



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # # - cloudfront-update:
      # #     requires: [smoke-test]
      # # - cleanup:
      # #     requires: [cloudfront-update]
      # - notify_on_success:
      #     requires:
      #       - smoke-test

